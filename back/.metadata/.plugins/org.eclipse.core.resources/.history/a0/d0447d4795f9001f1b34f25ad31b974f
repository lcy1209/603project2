package com.example.hansei.recruitmentapi.service;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.example.hansei.entity.HanUser;
import com.example.hansei.login.repository.UserRepository;
import com.example.hansei.recruitmentapi.dto.EventDto;
import com.example.hansei.recruitmentapi.entity.EventFavorite;
import com.example.hansei.recruitmentapi.repository.EventFavoriteRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class EventFavoriteService {

    private final EventFavoriteRepository eventFavoriteRepository;
    private final UserRepository userRepository;
    private final EventService eventService; // ✅ 이벤트 상세 조회 서비스 추가
    
    // 📌 즐겨찾기 추가
    public void addFavorite(Long userId, String eventNo) {
        if (eventFavoriteRepository.findByUser_UserIdAndEventNo(userId, eventNo).isEmpty()) {
            HanUser user = userRepository.findById(userId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            EventFavorite favorite = EventFavorite.builder()
                    .user(user)
                    .eventNo(eventNo)
                    .isDeleted(false)
                    .build();

            eventFavoriteRepository.save(favorite);
        }
    }

    // 📌 즐겨찾기 취소 (Soft Delete)
    public void removeFavorite(Long userId, String eventNo) {
        eventFavoriteRepository.findByUser_UserIdAndEventNo(userId, eventNo)
                .ifPresent(favorite -> {
                    favorite.setDeleted(true);
                    eventFavoriteRepository.save(favorite);
                });
    }

    // 📌 사용자의 즐겨찾기 목록 조회
    public List<String> getUserFavorites(Long userId) {
        return eventFavoriteRepository.findByUser_UserIdAndIsDeletedFalse(userId)
                .stream()
                .map(EventFavorite::getEventNo)
                .collect(Collectors.toList());
    }
    
 // ✅ 사용자의 즐겨찾기한 이벤트 목록을 상세 정보 포함하여 반환
    public List<EventDto> getUserFavoriteEvents(Long userId) {
        // 1️⃣ 사용자의 즐겨찾기한 이벤트 ID 목록 조회
        List<String> eventIds = eventFavoriteRepository.findEventIdsByUserId(userId);

        // 2️⃣ 각 이벤트 ID로 Worknet API에서 상세 정보 조회 후 DTO로 변환
        return eventIds.stream()
                .map(eventService::getEventDetail)  // ✅ API에서 이벤트 상세 정보 조회
                .filter(event -> event != null) // ✅ null 값 제거
                .collect(Collectors.toList());
    }

}
