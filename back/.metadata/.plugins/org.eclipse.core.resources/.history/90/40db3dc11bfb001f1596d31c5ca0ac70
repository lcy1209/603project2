package com.example.hansei.programs;

import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/programs")
@CrossOrigin(origins = "http://localhost:3000")
public class ProgramController {
    private final ProgramService programService;
    private final SimpMessagingTemplate messagingTemplate;

    public ProgramController(ProgramService programService, SimpMessagingTemplate messagingTemplate) {
        this.programService = programService;
        this.messagingTemplate = messagingTemplate;
    }

    /**
     * ✅ 특정 사용자의 신청 내역 조회 (신청자 정보 포함)
     */
    @GetMapping("/mypage/{userId}")
    public ResponseEntity<List<ApplicationDto>> getMyPrograms(@PathVariable("userId") Long userId) {
        System.out.println("📌 [API 요청] 신청 내역 조회: userId=" + userId);
        List<ApplicationDto> applications = programService.getMyPrograms(userId);
        return ResponseEntity.ok(applications);
    }

    // ✅ 모든 프로그램 조회
    @GetMapping
    public List<Program> getAllPrograms() {
        return programService.getAllPrograms();
    }

    // ✅ 특정 카테고리 프로그램 조회
    @GetMapping("/category/{category}")
    public List<Program> getProgramsByCategory(@PathVariable String category) {
        return programService.getProgramsByCategory(category);
    }

    // ✅ 특정 프로그램 ID로 조회
    @GetMapping("/{id}")
    public ResponseEntity<Program> getProgramById(@PathVariable("id") Long id) {
        return programService.getProgramById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * ✅ 프로그램 신청 기능
     */
    @PostMapping("/{id}/apply")
    public ResponseEntity<String> applyForProgram(@PathVariable Long id, @RequestBody UserRequest request) {
        System.out.println("📌 [API 요청] 프로그램 신청: userId=" + request.getUserId() + ", programId=" + id);
        
        try {
            boolean success = programService.applyForProgram(request.getUserId(), id);

            if (success) {
                // ✅ WebSocket 메시지 전송
                messagingTemplate.convertAndSend("/topic/programs", new WebSocketResponse(request.getUserId(), id, true, "✅ 신청 완료"));

                System.out.println("✅ 신청 완료: userId=" + request.getUserId() + ", programId=" + id);
                return ResponseEntity.ok("✅ 신청 완료");
            } 
        } catch (IllegalStateException e) {
            System.out.println("🚨 신청 실패: " + e.getMessage());
            return ResponseEntity.badRequest().body("🚨 신청 실패: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.out.println("🚨 요청 오류: " + e.getMessage());
            return ResponseEntity.badRequest().body("🚨 요청 오류: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("🚨 서버 오류 발생: " + e.getMessage());
            return ResponseEntity.internalServerError().body("🚨 서버 오류 발생");
        }

        System.out.println("🚨 신청 실패: 이미 신청했거나 정원이 초과됨");
        return ResponseEntity.badRequest().body("🚨 이미 신청했거나 정원이 초과되었습니다.");
    }

    /**
     * ✅ 프로그램 추가
     */
    @PostMapping
    public ResponseEntity<Program> addProgram(
            @RequestParam("name") String name,
            @RequestParam("startDate") String startDate,
            @RequestParam("endDate") String endDate,
            @RequestParam("maxParticipants") int maxParticipants,
            @RequestParam(value = "target", required = false) String target,
            @RequestParam(value = "gradeGender", required = false) String gradeGender,
            @RequestParam(value = "department", required = false) String department,
            @RequestParam(value = "posterName", required = false) String posterName,
            @RequestParam(value = "posterEmail", required = false) String posterEmail,
            @RequestParam(value = "posterPhone", required = false) String posterPhone,
            @RequestParam(value = "posterLocation", required = false) String posterLocation,
            @RequestParam(value = "description", required = false) String description,
            @RequestParam(value = "image", required = false) MultipartFile image,
            @RequestParam(value = "schedules", required = false) String schedulesJson, // 일정 데이터 JSON
            @RequestParam("category") String category
    ) throws IOException {
        try {
            Program program = new Program();
            program.setName(name);
            program.setStartDate(startDate);
            program.setEndDate(endDate);
            program.setMaxParticipants(maxParticipants);
            program.setTarget(target);
            program.setGradeGender(gradeGender);
            program.setDepartment(department);
            program.setPosterName(posterName);
            program.setPosterEmail(posterEmail);
            program.setPosterPhone(posterPhone);
            program.setPosterLocation(posterLocation);
            program.setDescription(description);
            program.setCategory(Program.Category.valueOf(category));

            if (image != null && !image.isEmpty()) {
                String imagePath = programService.saveImage(image);
                program.setImageUrl(imagePath);
            }

            if (schedulesJson != null && !schedulesJson.isEmpty()) {
                List<Schedule> schedules = programService.parseSchedules(schedulesJson);
                program.setSchedules(schedules);
            }

            Program savedProgram = programService.addProgram(program);

            messagingTemplate.convertAndSend("/topic/programs", savedProgram);

            System.out.println("✅ 프로그램 등록 완료: " + savedProgram.getName());
            return ResponseEntity.ok(savedProgram);
        } catch (IllegalArgumentException e) {
            System.out.println("🚨 잘못된 카테고리 값: " + category);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * ✅ 이미지 파일 조회
     */
    @GetMapping("/images/{filename}")
    public ResponseEntity<byte[]> getImage(@PathVariable String filename) throws IOException {
        System.out.println("📌 [API 요청] 이미지 조회: " + filename);
        byte[] image = programService.loadImage(filename);

        if (image != null) {
            String contentType = Files.probeContentType(Paths.get("uploads/" + filename));
            return ResponseEntity.ok()
                    .header("Content-Disposition", "inline; filename=\"" + filename + "\"")
                    .contentType(org.springframework.http.MediaType.parseMediaType(contentType))
                    .body(image);
        } else {
            System.out.println("🚨 이미지 파일을 찾을 수 없음: " + filename);
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * ✅ 사용자 요청을 받기 위한 내부 DTO
     */
    static class UserRequest {
        private Long userId;

        public Long getUserId() {
            return userId;
        }

        public void setUserId(Long userId) {
            this.userId = userId;
        }
    }

    /**
     * ✅ WebSocket 응답 DTO
     */
    private static class WebSocketResponse {
        private final Long userId;
        private final Long programId;
        private final boolean isApplied;
        private final String message;

        public WebSocketResponse(Long userId, Long programId, boolean isApplied, String message) {
            this.userId = userId;
            this.programId = programId;
            this.isApplied = isApplied;
            this.message = message;
        }
    }
}